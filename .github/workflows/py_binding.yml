name: PyBinding

on:
  push:
    branches: [ "master", "cpp23-clang20" ]

jobs:
  build:
    strategy:
      matrix:
        arch: [ x86-64, x86-64-v2, x86-64-v3, x86-64-v4, apple-m1, apple-m2, apple-m3, apple-m4 ]
        os: [ ubuntu-latest , windows-latest, macos-latest ]
        python: [ "3.8", "3.9", "3.10", "3.11", "3.12", "3.13" ]
        exclude:
          - os: windows-latest
            arch: apple-m1
          - os: windows-latest
            arch: apple-m2
          - os: windows-latest
            arch: apple-m3
          - os: windows-latest
            arch: apple-m4
          - os: ubuntu-latest
            arch: apple-m1
          - os: ubuntu-latest
            arch: apple-m2
          - os: ubuntu-latest
            arch: apple-m3
          - os: ubuntu-latest
            arch: apple-m4
          - os: macos-latest
            arch: x86-64
          - os: macos-latest
            arch: x86-64-v2
          - os: macos-latest
            arch: x86-64-v3
          - os: macos-latest
            arch: x86-64-v4

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - if: matrix.os == 'ubuntu-latest'
        name: Install Linux Dependencies
        run: |
          sudo apt install ninja-build
          sudo apt remove python3-lldb-14
      - if: matrix.os == 'windows-latest'
        name: Install Windows Dependencies
        run: |
          choco install ninja

      - if: matrix.os == 'ubuntu-latest'
        name: Install Clang 20 (Ubuntu)
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh 20
          sudo rm -rf llvm.sh
      - if: matrix.os == 'windows-latest'
        name: Install Clang 20 (Windows)
        run: |
          choco install llvm --version 20.1.0 -y
      - if: matrix.os == 'macos-latest'
        name: Install Clang 19 (MacOS)
        run: |
          brew install llvm@19

      - if: matrix.os == 'ubuntu-latest'
        name: Set CC and CXX for Linux
        run: |
          echo "CC=clang-20" >> $GITHUB_ENV
          echo "CXX=clang++-20" >> $GITHUB_ENV
      - if: matrix.os == 'windows-latest'
        name: Set CC and CXX for Windows
        shell: powershell
        run: |
          echo "CC=clang" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CXX=clang++" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - if: matrix.os == 'macos-latest'
        name: Set CC and CXX for MacOS
        run: |
          echo "CC=/opt/homebrew/opt/llvm/bin/clang" >> $GITHUB_ENV
          echo "CXX=/opt/homebrew/opt/llvm/bin/clang++" >> $GITHUB_ENV
          echo "PATH=/opt/homebrew/opt/llvm/bin:$PATH" >> $GITHUB_ENV


      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install scikit-build-core build twine pybind11 setuptools build tomlkit auditwheel

      - name: CMake Arguments (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "CMAKE_CXX_FLAGS=-mcpu=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: CMake Arguments (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "CMAKE_CXX_FLAGS=-march=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: CMake Arguments (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "CMAKE_CXX_FLAGS=-march=${{ matrix.arch }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set architecture environment variable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "ARCHITECTURE=${{ matrix.arch }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set architecture environment variable (Linux & MacOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "ARCHITECTURE=${{ matrix.arch }}" >> $GITHUB_ENV
          
      - name: Define version
        shell: python
        run: |
          import os
          import tomlkit
          
          ARCH_MAP = {
            "x86-64":    0,
            "x86-64-v2": 1,
            "x86-64-v3": 2,
            "x86-64-v4": 3,
            "apple-m1":  4,
            "apple-m2":  5,
            "apple-m3":  6,
            "apple-m4":  7
          }
  
          arch = os.environ.get("ARCHITECTURE", "")
          if arch not in ARCH_MAP:
            raise ValueError(f"Unsupported architecture '{arch}'. Supported: {', '.join(ARCH_MAP.keys())}")

          dev_version = ARCH_MAP[arch]
          
          with open("pyproject.toml", "r", encoding="utf-8") as f:
            doc = tomlkit.parse(f.read())
          
          doc["project"]["version"] = f"{doc['project']['version']}.dev{dev_version}"
          
          with open("pyproject.toml", "w", encoding="utf-8") as f:
            f.write(tomlkit.dumps(doc))
          
          print(f"Set project version to {doc['project']['version']}.")

      - name: Build Wheel
        run: |
          python -m build

      - name: ManyLinux Configuration
        if: matrix.os == 'ubuntu-latest'
        run: |
          auditwheel repair dist/*.whl

      - name: Generate name
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            OS_SHORT="linux"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            OS_SHORT="win"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            OS_SHORT="macos"
          else
          echo "Unknown OS: ${{ matrix.os }}"
          exit 1
          fi
          
          PY_SHORT="${{ matrix.python }}"
          PY_SHORT="cp${PY_SHORT//.}"
          
          ARCH_SHORT="${{ matrix.arch }}"
          ARCH_SHORT="${ARCH_SHORT//-/_}"
          
          ARTIFACT_NAME="stockdory-0.1.api0-${PY_SHORT}-${OS_SHORT}-${ARCH_SHORT}"
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_ENV"

      - name: Upload Wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.whl
          path: ./dist/*.whl

  publish:
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/stockdory

    permissions:
      id-token: write

    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Show downloaded Wheels
        run: ls -R dist

      - name: Publish Wheels
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
